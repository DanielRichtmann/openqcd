
Main program cvt1

SYNTAX

cvt1 -i <filename> [-rmold]


DESCRIPTION

This program converts gauge-field configurations from one storage format to
another.


COMMAND-LINE OPTIONS

The program has only few options since most of the parameters are passed
through an input file. The options are

-i <filename>    Specifies the name of the input file. The name can be
                 a fully qualified name or be specified relative to the
                 working directory.

-rmold           Removes the old configuration files and keeps only the
                 configurations in the converted storage format.

The types of I/O programs to be used for the field configurations is specified
in the input parameter file (see README.io for the available types).


INPUT PARAMETERS

The lattice size and the process grid must be defined in the file global.h
(see README.global). All other parameters are read from the input file and the
command line. An example of a valid input file is cvt1.in in this directory.
The parameter values specified in this file are:

[Run name]
name         Snoopy137             # Run name = configuration base name.

[Log directory]
log_dir      ../data/cvt1/log      # Log file directory.

[Boundary conditions]
type         2                     # Type of boundary condition (0: open,
                                   # 1: SF, 2: open-SF, 3: periodic).
phi          0.12 -0.56            # Boundary values of the gauge field at
                                   # time 0.
phi'         0.92 0.76             # Boundary values of the gauge field at
                                   # time NPROC0*L0.
[Configurations]
first        1                     # No of the first configuration to consider.
last         4                     # No of the last configuration.
step         1                     # Configuration separation (last-first must
                                   # be an integer multiple of step).

[Input storage format]
type         e                     # Configuration storage type (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/ym1/cnfg        # Configuration directory.
nio_nodes    8                     # Number of top level subdirectories used
                                   # for block-exported or local storage.
nio_streams  4                     # Number of parallel I/O streams (block-
                                   # exported or local storage).

[Output storage format]
type         b                     # Configuration storage type (e=exported,
                                   # b=block-exported, l=local).
cnfg_dir     /data/ym1/blk         # Configuration directory.
bs           16 8 8 24             # Block size to be used for block-exported
                                   # configurations.
nio_nodes    12                    # Number of top level subdirectories used
                                   # for block-exported or local storage.
nio_streams  8                     # Number of parallel I/O streams (block-
                                   # exported or local storage).

The chosen parameter values must satisfy the following constraints:

- In the case of storage of type "b", the block size bs must divide the
  lattice and the local lattice must divide the block size. Moreover,
  nio_nodes and nio_streams must divide the number of blocks.

- In the case of storage of type "l", nio_nodes and nio_streams must divide
  the number NPROC of MPI processes.

Depending on the specified parameters and options, the values of some
parameters are ignored and need not be included in the input parameter
file.


CONFIGURATION DIRECTORY STRUCTURE

0. Configuration base name

The configuration base name is set to the run name with the string "n<int>"
appended, where <int> is the configuration number. Configuration generated by
the simulation programs have configuration numbers running from 1 in steps of
1.

1. Configuration storage type "e"

These configurations are stored in the specified "cnfg_dir" directory.
The I/O programs used are import_cnfg() and export_cnfg().

2. Configuration storage type "b"

In this case the "cnfg_dir" directory is expected to contain the
subdirectories n/b/ with

  n=0,1,..,nio_nodes-1,

  b=0,1,..,(nb/nio_nodes)-1,

where nb denotes the number of blocks in the (global) lattice. The file
containing the field variables on block number ib is then stored in the
directory with

  n=ib/(nb/nio_nodes), b=ib%(nb/nio_nodes).

In order to facilitate file migrations to other directory structures, the
suffix "_b<int>" with <int> set to ib is appended to the configuration base
names. The I/O programs used are blk_import_cnfg() and blk_export_cnfg().

3. Configuration storage type "l"

The "cnfg_dir" is in this case expected to contain the subdirectories n/l/
with

  n=0,1,..,nio_nodes-1,

  l=0,1,..,(NPROC/nio_nodes)-1,

where NPROC denotes the number of MPI processes. The configuration file
written by the process with rank r is then stored in the directory with

  n=r/(NPROC/nio_nodes), l=r%(NPROC/nio_nodes).

The configuration name suffix is here taken to be "_<int>" with <int> set
to r. The I/O programs used are read_cnfg() and write_cnfg().

4. Physical storage devices

The physical device where the configurations are stored may vary from one MPI
process to another or it may be globally accessible from all processes. From
the point of view of the cvt1 program, the directories are distinguished solely
by their name. The aggregated bandwidth effectively achieved by the parallel
I/O streams may however depend on whether different disks are accessed or an
array of disks through some dispatching interface.


FILES

The program stores the results to a number of files with the following file
names:

  <name>.log       Log file.
  <name>.log~      Backup log file.

  <name>n3         Configuration file of storage type "e".
  <name>n3_b8      Configuration file of storage type "b".
  <name>n3_27      Configuration file of storage type "l".

Here n3 identifies configuration number 3, the suffix _b8 signals that the
file contains the gauge-field variables on block number 8 and the suffix _27
that it is a storage type "l" file written by the MPI process with rank 27.
The backup copy *.log~ of the log file is recreated each time a configuration
is fully processed.


SAFETY MEASURES AND ERROR REPORTING

A number of safety measures have been implemented:

- It is not possible to overwrite an existing *.log file. The file
  must first be deleted or renamed by hand if a run is to be repeated.

- The accessibility of the various directories and the compatibility
  of the selected options is checked at the beginning of the program.

Any attempt to force illegal operations leads to an abnormal termination of
the program, with an informative message being written either to the *.log
file or the file STARTUP_ERROR in the program directory if the error occurs
before the log file is opened.

On the other hand, the following should be kept in mind:

- Filenames may not be longer than 127 characters. The program
  checks at an early stage whether this is the case or not. Longer
  filenames can be accommodated by setting the macro NAME_SIZE in
  the global.h header file to a larger value.

- Once a run started successfully, the configurations generated
  are saved unconditionally, i.e. any existing field configurations
  with matching filenames are overwritten.


CHECKPOINTS AND EARLY TERMINATION

The program can be stopped gracefully by touching a file in the log directory
with the same name as the log file but with extension .end instead of .log. It
may take a while until the program exits, because it will only do so at the
points where a gauge configuration fully processed.

If the machine crashes, it is safe to assume that the configurations listed in
the backup log file have been correctly converted. Another run may then be
needed to convert the remaining configurations.
